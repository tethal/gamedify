"""initial schema

Revision ID: 11f6d2097453
Revises: 
Create Date: 2025-01-05 10:49:48.147216

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '11f6d2097453'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('player',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.create_table('quiz',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('usersession',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('question',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('text', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('quiz_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['quiz_id'], ['quiz.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('room',
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('quiz_id', sa.Uuid(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['quiz_id'], ['quiz.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('code')
    )
    op.create_table('answer',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('text', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('question_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['question.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('game',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('room_code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('player_a_id', sa.Uuid(), nullable=False),
    sa.Column('player_b_id', sa.Uuid(), nullable=False),
    sa.Column('player_on_turn_role', sa.Enum('A', 'B', name='playerrole'), nullable=True),
    sa.Column('is_over', sa.Boolean(), nullable=False),
    sa.Column('rows', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['player_a_id'], ['player.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['player_b_id'], ['player.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['room_code'], ['room.code'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('playerconnection',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('player_id', sa.Uuid(), nullable=False),
    sa.Column('room_code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('active_count', sa.Integer(), nullable=False),
    sa.Column('game_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['game.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['player_id'], ['player.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['room_code'], ['room.code'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tile',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('game_id', sa.Uuid(), nullable=False),
    sa.Column('row', sa.Integer(), nullable=False),
    sa.Column('col', sa.Integer(), nullable=False),
    sa.Column('state', sa.Enum('DEFAULT', 'SELECTED', 'A', 'B', name='tilestate'), nullable=True),
    sa.Column('question', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['game.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('tile')
    op.drop_table('playerconnection')
    op.drop_table('game')
    op.drop_table('answer')
    op.drop_table('room')
    op.drop_table('question')
    op.drop_table('usersession')
    op.drop_table('quiz')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_table('user')
    op.drop_table('player')
    # ### end Alembic commands ###
